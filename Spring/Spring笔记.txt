Spring 是一个 IOC(DI) 和 AOP 容器框架.
IOC：控制反转，控制权的转移，应用程序本身不负责依赖对象的创建和维护，而是由外部容器负责创建和维护。
DI(依赖注入)是其一种实现方式。
Spring注入：是指在启动Spring容器加载Bean配置的时候，完成对变量的赋值行为，常用的有两种注入方法：
1、属性注入：
通过 setter 方法注入Bean 的属性值或依赖的对象
属性注入使用 <property> 元素, 使用 name 属性指定 Bean 的属性名称，value 属性或 <value> 子节点指定属性值
<property name="name" value="value"/>
2、构造注入:
通过构造方法注入Bean 的属性值或依赖的对象，它保证了 Bean 实例在实例化后就可以使用。
构造器注入在 <constructor-arg> 元素里声明属性, <constructor-arg> 中没有 name 属性.
<bean id="car2" class="com.lskyo.spring.beans.Car">
	<constructor-arg value="Baoma" index="0" type="String"/>
	<constructor-arg value="Beijing" index="1" type="String"/>
	<constructor-arg value="240" index="2" type="int"/>
</bean>
如果有重载的构造器，可以用index及type属性区分构造器。


Bean配置项
Id, 唯一标识,若 id 没有指定，Spring 自动将权限定性类名作为 Bean 的名字
Class, 要实例化的类
Scope, 作用域
Constructor arguments, 构造参数
Properties, 属性
Autowiring mode, 自动装备的模式
lazy-initialization mode, 加载模式
Initialization/destruction method, 加载/销毁的方式

Spring 容器
在 Spring IOC 容器读取 Bean 配置创建 Bean 实例之前, 必须对它进行实例化. 
只有在容器实例化后, 才可以从 IOC 容器里获取 Bean 实例并使用.
Spring 提供了两种类型的 IOC 容器实现:
BeanFactory: IOC 容器的基本实现.
ApplicationContext: 提供了更多的高级特性. 是 BeanFactory 的子接口.
BeanFactory 是 Spring 框架的基础设施，面向 Spring 本身；
ApplicationContext 面向使用 Spring 框架的开发者，几乎所有的应用场合都直接使
用 ApplicationContext 而非底层的 BeanFactory

ApplicationContext的主要实现类：
ClassPathXmlApplicationContext：从 类路径下加载配置文件
FileSystemXmlApplicationContext: 从文件系统中加载配置文件
ApplicationContext 在初始化上下文时就实例化所有单例的 Bean。
WebApplicationContext 是专门为 WEB 应用而准备的，它允许从相对于 WEB 根目录的路径中完成初始化工作

Bean之间的关系：继承，依赖；
Bean的作用域
singletion: 默认，单例，指一个Bean容器中只存在一份
prototype: 每次请求(getBean)都会创建新的实例，destroy方式不生效
request: 每次http请求创建一个实例且仅在当前request内有效，仅适用于WebApplicationContext环境。
session: 同上，每次http请求创建，当前session内有效
global session: 基于protelet的web中有效，如果是在web中，同session

使用外部属性文件：
Spring 提供了一个 PropertyPlaceholderConfigurer 的 BeanFactory 后置处理器, 
这个处理器允许用户将 Bean 配置的部分内容外移到属性文件中. 可以在 Bean 配置
文件里使用形式为 ${var} 的变量, PropertyPlaceholderConfigurer 从属性文件里
加载属性, 并使用这些属性来替换变量.


在 classpath 中扫描组件
组件扫描(component scanning):  Spring 能够从 classpath 下自动扫描, 侦测和实例化具有特定注解的组件. 
特定组件包括:
@Component: 基本注解, 标识了一个受 Spring 管理的组件
@Respository: 标识持久层组件
@Service: 标识服务层(业务层)组件
@Controller: 标识表现层组件
对于扫描到的组件, Spring 有默认的命名策略: 使用非限定类名, 第一个字母小写. 也可以在注解中通过 value 属性值标识组件的名称
当在组件类上使用了特定的注解之后, 还需要在 Spring 的配置文件中声明 <context:component-scan> ：
base-package 属性指定一个需要扫描的基类包，Spring 容器将会扫描这个基类包里及其子包中的所有类. 
当需要扫描多个包时, 可以使用逗号分隔.
如果仅希望扫描特定的类而非基包下的所有类，可使用 resource-pattern 属性过滤特定的类
<context:include-filter> 子节点表示要包含的目标类
<context:exclude-filter> 子节点表示要排除在外的目标类

<context:component-scan> 元素还会自动注册 AutowiredAnnotationBeanPostProcessor 实例, 
该实例可以自动装配具有 @Autowired 和 @Resource 、@Inject注解的属性.
@Autowired 注解自动装配具有兼容类型的单个 Bean属性
构造器, 普通字段(即使是非 public), 一切具有参数的方法都可以应用@Authwired 注解
默认情况下, 所有使用 @Authwired 注解的属性都需要被设置. 当 Spring 找不到匹配的 Bean 装配属性时, 
会抛出异常, 若某一属性允许不被设置, 可以设置 @Authwired 注解的 required 属性为 false
默认情况下, 当 IOC 容器里存在多个类型兼容的 Bean 时, 通过类型的自动装配将无法工作. 此时可以
在 @Qualifier 注解里提供 Bean 的名称. Spring 允许对方法的入参标注 @Qualifiter 已指定注入 Bean 的名称
 @Authwired 注解也可以应用在数组类型的属性上, 此时 Spring 将会把所有匹配的 Bean 进行自动装配.
@Authwired 注解也可以应用在集合属性上, 此时 Spring 读取该集合的类型信息, 然后自动装配所有与之兼容的 Bean. 
@Authwired 注解用在 java.util.Map 上时, 若该 Map 的键值为 String, 那么 Spring 将自动装配与之 Map 值
类型兼容的 Bean, 此时 Bean 的名称作为键值


Bean的生命周期
-定义
-初始化
	-法1：实现org.springframework.beans.factory.InitializingBean接口，实现afterPropertiesSet方法
	-法2：配置init-method属性
-使用
-销毁
	-法1：实现org.springframework.beans.factory.DisposableBean接口，实现destroy方法
	-法2：配置destroy-method属性

AOP
AOP(Aspect-Oriented Programming, 面向切面编程): 是一种新的方法论, 是对传统 OOP(Object-Oriented Programming, 面向对象编程) 的补充.
AOP 的主要编程对象是切面(aspect), 而切面模块化横切关注点.
在应用 AOP 编程时, 仍然需要定义公共功能, 但可以明确的定义这个功能在哪里, 以什么方式应用, 并且不必修改受影响的类. 这样一来横切关注
点就被模块化到特殊的对象(切面)里.
AOP 的好处:
每个事物逻辑位于一个位置, 代码不分散, 便于维护和升级
业务模块更简洁, 只包含核心业务代码.


AOP 术语
切面(Aspect):  横切关注点(跨越应用程序多个模块的功能)被模块化的特殊对象
通知(Advice):  切面必须要完成的工作
目标(Target): 被通知的对象
代理(Proxy): 向目标对象应用通知之后创建的对象
连接点（Joinpoint）：程序执行的某个特定位置：如类某个方法调用前、调用后、方法抛出异常后等。连接点由两个信息确定：方法表示的程序执行点；
相对点表示的方位。例如 ArithmethicCalculator#add() 方法执行前的连接点，执行点为 ArithmethicCalculator#add()； 方位为该方法执行前的位置
切点（pointcut）：每个类都拥有多个连接点：例如 ArithmethicCalculator 的所有方法实际上都是连接点，即连接点是程序类中客观存在的事务。
AOP 通过切点定位到特定的连接点。类比：连接点相当于数据库中的记录，切点相当于查询条件。切点和连接点不是一对一的关系，一个切点匹配多个连
接点，切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件。





















