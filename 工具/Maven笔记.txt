目录结构：
src
    -main
        -java
            -项目代码
    -test
        -java
            -测试代码
    -resources
        -资源文件

mvn -v      查看maven版本
    compile 编译
    test    测试
    package 打包
    clean   删除target
    install 安装jar包到本地仓库中

创建目录的两种方式：
1.archetype:generate    按照提示进行创建
2.archetype:generate -DgroupId=组织名，一般是公司网址的反写+项目名
                     -DartifactId=项目名-模块名
                     -Dversion=版本号
                     -Dpackage=代码所存在的包名

更改本地仓库：
在settings.xml中更改：<localRepository>/path/to/local/repo</localRepository>

maven生命周期：
clean, compile, test, package, install
clean(清理项目): pre-clean -> clean -> post-clean
default(构建项目): compile -> test -> package -> install
site(生成项目站点): pre-site -> site -> post-site -> site-deploy

pom标签：
打包，默认是jar，可选war，zip，pom
<packaging></packaging>
项目描述名
<name></name>
项目地址
<url></url>
项目描述
<description></description>
开发人员
<developers></developers>
许可证
<licenses></licenses>
组织信息
<organization></organization>
依赖列表
<dependencies>
	依赖项
	<dependency>
		坐标
		<groupId></groupId>
		<artifactId></artifactId>
		<version></version>
		
		<type></type>
		依赖范围，默认compile，其他有provided，runtime，test，system，import
		<scope></scope>
		设置依赖是否可选，默认false
		<optional></optional>
		排除依赖传递列表
		<exclusions>
			排除项
			<exclusion>
			</exclusion>
		</exclusions>
	</dependency>
</dependencies>
依赖管理
<dependencyManagement>
	<dependencies>
		<dependency></dependency>
	</dependencies>
</dependencyManagement>
<build>
	插件列表
	<plugins>
		插件
		<plugin>
			坐标
			<groupId></groupId>
			<artifactId></artifactId>
			<version></version>
		</plugin>
	</plugins>
</build>
通常用于在子模块中继承父模块的pom
<parent></parent>
模块列表
<modules>
	模块
	<module></module>
</modules>



























